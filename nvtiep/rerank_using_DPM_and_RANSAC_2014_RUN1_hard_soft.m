function rerank_using_DPM_and_RANSAC_2014_RUN1_hard_soft(data_name, base_feature, base_BOW_fusion, base_RANSAC, base_DPM, start_video_id, end_video_id)
% Example:
% rerank_using_DPM_and_RANSAC_2014('tv2014', 'surrey.hard.soft', 'R1_tv2013.fusion', 
% 'R4_rawRANSAC_tv2013.surrey.hard.soft.latefusion.asym', 'R3_tv2013.DPM.surrey.hard.soft.latefusion.asym_fg+bg_0.1_hesaff_rootsift_noangle_akmeans_1000000_100000000_50_kdtree_8_800_v1_f1_3_0.0125_avg_pooling_full_notrim_clip_idf_nonorm_kdtree_3_0.0125_-1_dist_avg_autoasym_ivf_0.5', 1, 2)

% Copied from rerank_using_DPM_and_RANSAC
% Du kien de chay cho Run1 (tv2014 submission)
% Modified 12 Aug 2014 - 3:30PM
% Ko dung compute_RANSAC - da duoc chuyen ra mot function khac compute_raw_RANSAC_final.m

% base_BOW_fusion: base scores. In fusion: A*B*C*[base_scores] --> goal: MAP luon cao hon base_scores
% base_scores thuong la fusion cua BoW+DPM+RANSAC, hoac BoW+DPM, hoac surrey+perdoch, etc
% base_scores la RunID duoc generated by LateFusion4MultiRuns

% base_RANSAC: R4_rawRANSAC_tv2013.surrey.hard.soft.latefusion.asym
% NOTE: base_RANSAC phai CONSISTENT voi base_feature, ie. neu base_feature la surrey.hard.soft thi base_RANSAC phai co surrey.hard.soft

% base_DPM: can check CONSISTENT tuong tu base_RANSAC

% base_feature: chi moi support surrey.hard.soft

if nargin == 0
	data_name = 'tv2014';
	base_feature = 'surrey.hard.soft'
	base_BOW_fusion = 'R1_tv2013.fusion-surrey.hard.soft+DPM[2-1]';
	base_RANSAC = 'R4_tv2013.rawRANSAC.surrey.hard.soft.latefusion.asym';
	base_DPM = 'R3_tv2013.DPM.surrey.hard.soft.latefusion.asym_fg+bg_0.1_hesaff_rootsift_noangle_akmeans_1000000_100000000_50_kdtree_8_800_v1_f1_1_avg_pooling_full_notrim_clip_idf_nonorm_kdtree_3_0.0125_-1_dist_avg_autoasym_ivf_0.5';
	start_video_id = 1
	end_video_id = 1000
end


if isempty(strfind(base_RANSAC, base_feature))
	disp ('Insconsistency between base_featue and base_RANSAC');
	quit;
end

if isempty(strfind(base_DPM, base_feature))
	disp ('Insconsistency between base_featue and base_RANSAC');
	quit;
end


ROOT_DIR = '/net/per610a/export/das11f/ledduy/trecvid-ins-2014/';

ROOT_FEATURE_DIR = fullfile(ROOT_DIR, 'feature/keyframe-5');

ROOT_RESULT_DIR = fullfile(ROOT_DIR, 'result');

ROOT_MODEL_DIR = fullfile(ROOT_DIR, 'model/ins-dpm');

ROOT_TMP_DIR = fullfile(ROOT_DIR, 'tmp');

% identify queryID
if strcmp(data_name, 'tv2013')
	start_query_id = 9069;
	end_query_id = 9098;
	query_pat = 'query2013';
	test_pat = 'test2013';
end

if strcmp(data_name, 'tv2014')
	start_query_id = 9099;
	end_query_id = 9128;
	query_pat = 'query2014';
	test_pat = 'test2014';
end

if strcmp(base_feature, 'surrey.hard.soft')
	QUERY_FEATURE_CONFIGZ = 'bow.db_1_qr_fg+bg_0.1_hesaff_rootsift_noangle_akmeans_1000000_100000000_50_kdtree_8_800_kdtree_3_0.0125';
	TESTDB_QUANTIZATION_CONFIGZ = 'hesaff_rootsift_noangle_cluster/akmeans_1000000_100000000_50/kdtree_8_800/v1_f1_1_sub_quant';
	TESTDB_RAW_FEATURE_CONFIGZ = 'hesaff_rootsift_noangle_mat';
end

% qr_raw_bow = 'feature/keyframe-5/tv2013/query2013/bow.db_1_qr_fg+bg_0.1_hesaff_rootsift_noangle_akmeans_1000000_100000000_50_kdtree_8_800_kdtree_3_0.0125/raw_bow.mat';
qr_raw_bow = fullfile(ROOT_FEATURE_DIR, data_name, query_pat, QUERY_FEATURE_CONFIGZ, 'raw_bow.mat');

% feature/keyframe-5/tv2013/test2013/hesaff_rootsift_noangle_cluster/akmeans_1000000_100000000_50/kdtree_8_800/v1_f1_1_sub_quant
db_quant_dir = fullfile(ROOT_FEATURE_DIR, data_name, test_pat, TESTDB_QUANTIZATION_CONFIGZ);

db_frame_info_dir = fullfile(ROOT_FEATURE_DIR, data_name, test_pat, TESTDB_RAW_FEATURE_CONFIGZ);

%is_compute_RANSAC = 0; DEL

debug_mode = false;
is_using_RANSAC = 1;

%% base level path configuration
ex_bounding_box = 0; % NOT USED


RESULT_RUN_ID = ['R0_', data_name, '.', base_feature, '+DPM'];

if is_using_RANSAC
	RESULT_RUN_ID = ['R0_', data_name, '.', base_feature, '+DPM+RANSAC'];
end

BASE_RESULT_DIR = fullfile(ROOT_RESULT_DIR, data_name, test_pat, RESULT_RUN_ID); 

% raw RANSAC
BASE_TMP_RANSAC_DIR = fullfile(ROOT_RESULT_DIR, data_name, test_pat, base_RANSAC);  

LOG_FILE = fullfile(ROOT_TMP_DIR, 'R0_fusion_using_BOW+DPM+RANSAC.txt');

% /export/das11f/ledduy/trecvid-ins-2014/model/ins-dpm/tv2014/query2014/9107
MODEL_DIR = fullfile(ROOT_MODEL_DIR, data_name, query_pat);

LOCAL_DIR = '/tmp/dpm/';

% Change when using different features BoW
% addpath('/net/per610a/export/das11f/ledduy/plsang/nvtiep/INS/code');
% addpath('/net/per610a/export/das11f/ledduy/plsang/nvtiep/INS/code/web');
run('/net/per610a/export/das11f/ledduy/plsang/nvtiep/libs/vlfeat-0.9.18/toolbox/vl_setup.m');

% Create result folder
if ~exist(BASE_RESULT_DIR, 'dir')
	mkdir(BASE_RESULT_DIR);
	fileattrib(BASE_RESULT_DIR, '+w', 'a');
end

% thu muc tro den ket qua DPM --> lay bounding box
LOOK_UP_BB_DPM_DIR = fullfile(ROOT_RESULT_DIR, data_name, test_pat, base_DPM);  
BASE_BOW_FUSION_DIR = fullfile(ROOT_RESULT_DIR, data_name, test_pat, base_BOW_fusion);  

if is_using_RANSAC
	re = '.*_KSC(.*)';
	for q_id = start_query_id:end_query_id	% Duyet qua tat ca cac cau query
		qr_shotID = num2str(q_id);
		final_result_dir = fullfile(BASE_RESULT_DIR, qr_shotID);
		final_result_local_dir = fullfile(LOCAL_DIR, qr_shotID);
		% create folder if not existing
		if ~exist(final_result_dir, 'dir')
			mkdir(final_result_dir);
			fileattrib(final_result_dir, '+w', 'a');
		end
		if ~exist(final_result_local_dir, 'dir')
			mkdir(final_result_local_dir);
		end
		
		% Load Original fusion using DPM and BoW: w1 x R_bow + w2 x R_dpm
		fusion_res_file = fullfile(BASE_BOW_FUSION_DIR, qr_shotID , [qr_shotID, '.res']);
		fid = fopen(fusion_res_file);
		dpm_fusion = textscan(fid, '%s #$# %s #$# %f');
		fclose(fid);
		
		% Load DPM scale factor
		scale_factor_file = fullfile(MODEL_DIR, qr_shotID, [qr_shotID '.cfg']);
		scale_reg = 'Scale : (.*)';
		fid = fopen(scale_factor_file);
		[rematch, retok] = regexp(strtrim(fgetl(fid)), scale_reg, 'match', 'tokens');
		scale_factor = 1.0/str2double(retok{end}{1});
		fclose(fid);

		for id = start_video_id:end_video_id
			fprintf('\rQuery %d, Video: %d - (%d - %d)', q_id, id, start_video_id, end_video_id);
			lookup_fname = [qr_shotID,'/TRECVID2013_', num2str(id),'.res'];
			% Write Log file
			logfile=fopen(LOG_FILE,'a');
			fprintf(logfile, '\r Query: %d. VidId: %d - (%d - %d)\n', q_id, id, start_video_id, end_video_id);
			fclose(logfile);
			fileattrib(LOG_FILE, '+w', 'a');
			
			% Check .res file already existed in data server or not?
			dpm_ransac_res_file = fullfile(final_result_dir, ['/TRECVID2013_', num2str(id),'.res']);
			if exist(dpm_ransac_res_file, 'file')
				continue;
			end
			
			% Load DPM .res files to get bounding box information
			dpm_res_file = fullfile(LOOK_UP_BB_DPM_DIR,lookup_fname);
			if ~exist(dpm_res_file, 'file')
				continue;
			end
			fid = fopen(dpm_res_file, 'r');
			C = textscan(fid, '%s #$# %s #$# %f #$# %f #$# %f #$# %f #$# %f #$# %f');
			frame_names = C{1};
			shot_id = C{2};
			%score = C{3};
			left = C{4}.*scale_factor-ex_bounding_box;
			top = C{5}.*scale_factor-ex_bounding_box;
			right = C{6}.*scale_factor+ex_bounding_box;
			bottom = C{7}.*scale_factor+ex_bounding_box;
			fclose(fid);
			clear C;
			
			% Load inlier files file using RANSAC from previous step
			ransac_inlier_file = fullfile(BASE_TMP_RANSAC_DIR, qr_shotID, ['/TRECVID2013_', num2str(id),'.mat']);
			load(ransac_inlier_file);
					
			% Find common shot id and Fuse score
			dpm_ransac_res_local_file = fullfile(final_result_local_dir, ['/TRECVID2013_', num2str(id),'.res']);
			if ~debug_mode
				fid = fopen(dpm_ransac_res_local_file, 'w');
			end

			nshot = length(inliers_struct.shot_list);
			for shot_idx = 1:nshot	% duyet qua tat ca cac shot trong danh sach cua RANSAC
				shot = inliers_struct.shot_list{shot_idx};
				if debug_mode && ~strcmp(shot, debug_shot)
					continue;
				end
				frame_locs = find(ismember(shot_id, shot));	% tim nhung frameID trong DPM .res co shot ID giong voi shotID cua RANSAC
				
				N_fg = 0; % co the nam trong lan ko nam trong DPM region??!!??
				N_bg = 0;
				
				[~, previous_score_id] = ismember(shot, dpm_fusion{1});
				P_score = dpm_fusion{3}(previous_score_id);
				new_scores = [];
				for frame_idx=1:length(frame_locs) % duyet qua tat ca cac frame ma co su dung DPM
					[rematch, frame_name] = regexp(frame_names{frame_locs(frame_idx)}, re, 'match', 'tokens');
					[isa, loc] = ismember(frame_name{end}{1}, inliers_struct.frame_name{shot_idx});
					
					fg_kp = [];
					bg_kp = [];
					if ~isempty(inliers_struct.fg_inlier_loc{shot_idx}{loc})
						% merge all shared words
						fg_kp = [inliers_struct.fg_inlier_loc{shot_idx}{loc}{:}];
						fg_kp = unique(fg_kp', 'rows')';
					end
					if ~isempty(inliers_struct.bg_inlier_loc{shot_idx}{loc})
						% merge all shared words
						nquery = length(inliers_struct.bg_inlier_loc{shot_idx}{loc});
						for ii = 1:nquery
							if size(inliers_struct.bg_inlier_loc{shot_idx}{loc}{ii},2) < 4
								inliers_struct.bg_inlier_loc{shot_idx}{loc}{ii} = [];
							end
						end
						bg_kp = [inliers_struct.bg_inlier_loc{shot_idx}{loc}{:}];
						bg_kp = unique(bg_kp', 'rows')';
					end
					
					%N_fg = N_fg+size(fg_kp,2);
					%N_bg = N_bg+size(bg_kp,2); % version 2.0
					N_bg = size(bg_kp,2);		% version 3.0
					N_fg = size(fg_kp,2);		% version 4.0, bo DPM
					Nd = 0;
					if ~isempty(fg_kp)
						Nd = sum(fg_kp(1,:)>=left(frame_locs(frame_idx))&fg_kp(1,:)<=right(frame_locs(frame_idx))&...
								 fg_kp(2,:)>=top(frame_locs(frame_idx))&fg_kp(2,:)<=bottom(frame_locs(frame_idx)));
					end
					%% compute Nd, N_fg, N_bg, p_score
					% Nd = number of shares words between DPM region and background inliers
					% N_fg = number of shares words in foreground region of query image and frames images
					% N_bg = number of shares words in foreground region of query image and frames images				
					%new_scores(end+1) = exp(Nd)*log2(max(2,N_bg))*P_score;				% Cong thuc goc
					%new_scores(end+1) = (Nd+0.001)*log2(max(2,N_bg))*P_score; 	% binh thuong, co epsilon
					%new_scores(end+1) = max(1,Nd)*log2(max(2,N_bg))*P_score; 	% remove epsilon
					%new_scores(end+1) = max(1,N_fg)*log2(max(2,N_bg))*P_score; 	% remove DPM
					new_scores(end+1) = max(1,Nd)*max(1,Nd)*max(1,N_fg-Nd)*log2(max(2,N_bg))*P_score; 	% using both Nd and Nfg
					%new_scores(end+1) = max(1,Nd)*max(1,N_fg-Nd)*log2(max(2,N_bg))*P_score; 			% using both Nd and Nfg 1
					%new_scores(end+1) = max(1,Nd)*max(1,Nd)*max(1,N_fg)*log2(max(2,N_bg))*P_score; 	% using both Nd and Nfg 2
					%new_scores(end+1) = max(1,Nd)*max(1,Nd)*max(1,Nd)*max(1,N_fg-Nd)*log2(max(2,N_bg))*P_score; 	% using both Nd and Nfg 3 
					%new_scores(end+1) = max(1,Nd)*max(1,N_fg-Nd)*log2(max(2,N_bg))*P_score; 			% using both Nd and Nfg 4
					%new_scores(end+1) = P_score; 								% fuse 2 : 1
					
					if debug_mode
						fullfile('/net/per610a/export/das11g/caizhizhu/ins/ins2013/frames_png/', shot, [frame_name{end}{1} '.png'])
						I = imread(fullfile('/net/per610a/export/das11g/caizhizhu/ins/ins2013/frames_png/', shot, [frame_name{end}{1} '.png']));
						figure; imshow(I); hold on;
						xx = [left(frame_locs(frame_idx))  right(frame_locs(frame_idx)) right(frame_locs(frame_idx)) left(frame_locs(frame_idx)) left(frame_locs(frame_idx))];
						yy = [top(frame_locs(frame_idx)) top(frame_locs(frame_idx)) bottom(frame_locs(frame_idx)) bottom(frame_locs(frame_idx)) top(frame_locs(frame_idx))];
						plot(xx, yy, 'r');
						if ~isempty(fg_kp)
							plot(fg_kp(1,:), fg_kp(2,:), 'g+');
						end
						if ~isempty(bg_kp)
							plot(bg_kp(1,:), bg_kp(2,:), 'b+');
						end
						pause;
					end
				end
				% Write to output file
				if ~debug_mode
					fprintf(fid, '%s #$# %s #$# %f\n', shot, shot, max(new_scores));
				end
			end
			if ~debug_mode
				fclose(fid);
				status = unix(['mv ' dpm_ransac_res_local_file ' ' dpm_ransac_res_file]);
				if status == 0
					try
						delete(dpm_ransac_res_local_file);
					catch
						error('Cannot delete temporary result file');
					end
				end
				fileattrib(dpm_ransac_res_file, '+w', 'a');
			end
			clear inliers_struct fg_locs fg_kp bg_kp frame_names shot_id score left top right bottom frame_locs
		end
	end
else
	load(qr_raw_bow); 			% Dung de lay thong tin query_filenames va frame_quant_info
	nquery = length(query_filenames);
	for q_id = start_query_id:end_query_id	% Duyet qua tat ca cac cau query
		qr_shotID = num2str(q_id);
		final_result_dir = fullfile(BASE_RESULT_DIR, qr_shotID);
		final_result_local_dir = fullfile(LOCAL_DIR, qr_shotID);
		% create folder if not existing
		if ~exist(final_result_dir, 'dir')
			mkdir(final_result_dir);
			fileattrib(final_result_dir, '+w', 'a');
		end
		if ~exist(final_result_local_dir, 'dir')
			mkdir(final_result_local_dir);
		end
		
		% Load Original fusion using DPM and BoW: w1 x R_bow + w2 x R_dpm
		fusion_res_file = fullfile(BASE_BOW_FUSION_DIR, qr_shotID , [qr_shotID, '.res']);
		fid = fopen(fusion_res_file);
		dpm_fusion = textscan(fid, '%s #$# %s #$# %f');
		fclose(fid);
		
		% Load DPM scale factor
		scale_factor_file = fullfile(BASE_CONFIG_DIR, [qr_shotID '.cfg']);
		scale_reg = 'Scale : (.*)';
		fid = fopen(scale_factor_file);
		[rematch, retok] = regexp(strtrim(fgetl(fid)), scale_reg, 'match', 'tokens');
		scale_factor = 1.0/str2double(retok{end}{1});
		fclose(fid);
		
		% get list of query images
		re = 'frames_png/(.*)/(.*.png)';		
		query_set = cell(0);
		count = 0;
		query_id = -1;
		for i = 1:nquery	% find all frames of given query
			for topic_id = 1:length(query_filenames{i})
				[rematch, retok] = regexp(query_filenames{i}{topic_id}, re, 'match', 'tokens');
				if strcmp(qr_shotID, retok{1}{1})
					count = count+1;
					query_set{count} = fullfile('/net/per610a/export/das11g/caizhizhu/ins/ins2013/query/frames_png', retok{1}{1}, retok{1}{2});
					query_id = i;
				end
			end
			if query_id ~= -1
				break;
			end
		end

		for id = start_video_id:end_video_id
			fprintf('\rQuery %d, Video: %d - (%d - %d)', q_id, id, start_video_id, end_video_id);
			lookup_fname = [qr_shotID,'/TRECVID2013_', num2str(id),'.res'];
			% Write Log file
			logfile=fopen(LOG_FILE,'a');
			fprintf(logfile, '\r Query: %d. VidId: %d - (%d - %d)\n', q_id, id, start_video_id, end_video_id);
			fclose(logfile);
			fileattrib(LOG_FILE, '+w', 'a');
			
			% Check .res file already existed in data server or not?
			dpm_nonRANSAC_res_file = fullfile(final_result_dir, ['/TRECVID2013_', num2str(id),'.res']);
			if exist(dpm_nonRANSAC_res_file, 'file')
				continue;
			end
			
			% Load DPM .res files to get bounding box information
			dpm_res_file = fullfile(LOOK_UP_BB_DPM_DIR,lookup_fname);
			if ~exist(dpm_res_file, 'file')
				continue;
			end
			fid = fopen(dpm_res_file, 'r');
			C = textscan(fid, '%s #$# %s #$# %f #$# %f #$# %f #$# %f #$# %f #$# %f');
			frame_names = C{1};
			shot_id = C{2};
			%score = C{3};
			left = C{4}.*scale_factor-ex_bounding_box;
			top = C{5}.*scale_factor-ex_bounding_box;
			right = C{6}.*scale_factor+ex_bounding_box;
			bottom = C{7}.*scale_factor+ex_bounding_box;
			fclose(fid);
			clear C;
					
			% Find common shot id and Fuse score
			dpm_nonransac_res_local_file = fullfile(final_result_local_dir, ['/TRECVID2013_', num2str(id),'.res']);
			if ~debug_mode
				fid = fopen(dpm_nonransac_res_local_file, 'w');
			end

			shot_list = unique(shot_id);
			nshot = length(shot_list);
			for shot_idx = 1:nshot	% duyet qua tat ca cac shot trong danh sach cua RANSAC
				shot = shot_list{shot_idx};
				if debug_mode && ~strcmp(shot, debug_shot)
					continue;
				end
				frame_locs = find(ismember(shot_id, shot));	% tim nhung frameID trong DPM .res co shot ID giong voi shotID cua RANSAC
				
				N_fg = 0; % co the nam trong lan ko nam trong DPM region??!!??
				N_bg = 0;
				
				% get list of visual words of db_image
				db_quant_file = fullfile(db_quant_dir, [shot,'.mat']);
				load(db_quant_file);		% dung de lay thong tin bins
				db_frame_info_file = fullfile(db_frame_info_dir, [shot,'.mat']);
				load(db_frame_info_file);	% dung de lay thong tin clip_frame
				nframe_per_shot = length(clip_frame);
				% Tim frame_id cua db_image trong danh sach frame cua db_shotID
				db_set=clip_frame;
				
				[~, previous_score_id] = ismember(shot, dpm_fusion{1});
				P_score = dpm_fusion{3}(previous_score_id);
				new_scores = [];
				for frame_idx=1:length(frame_locs) % duyet qua tat ca cac frame ma co su dung DPM
					re = '.*_KSC(.*)';
					[rematch, frame_name] = regexp(frame_names{frame_locs(frame_idx)}, re, 'match', 'tokens');
					[isa, loc] = ismember(frame_name{end}{1}, db_set);
					
					db_words_id = bins{loc};
					db_keypoint = round(clip_kp{loc}(:,:));
					
					fg_kp = [];
					bg_kp = [];
					for topic_id = 1:length(query_set)	% For all frames of a query					
						% query image info
						fg_idx = frame_quant_info{query_id}.fg_index{topic_id};
						bg_idx = frame_quant_info{query_id}.bg_index{topic_id};
						qr_words_id_fg = frame_quant_info{query_id}.valid_bins{topic_id}(:,fg_idx);
						qr_words_id_bg = frame_quant_info{query_id}.valid_bins{topic_id}(:,bg_idx);
						%qr_keypoint_fg = round(frame_quant_info{query_id}.query_kp{topic_id}(:, fg_idx));
						%qr_keypoint_bg = round(frame_quant_info{query_id}.query_kp{topic_id}(:, bg_idx));
						
						[shared_words_fg, iqr_fg, idb_fg] = intersect(qr_words_id_fg(:), db_words_id);
						[shared_words_bg, iqr_bg, idb_bg] = intersect(qr_words_id_bg(:), db_words_id);

						%knn=size(qr_words_id_fg,1);
						%iqr_fg = floor((iqr_fg+knn-1)/knn);
						%iqr_bg = floor((iqr_bg+knn-1)/knn);

						% RANSAC on foreground only
						if ~isempty(db_keypoint)
							frame2 = db_keypoint(1:2,idb_fg);
							fg_kp = [fg_kp frame2];
							
							% RANSAC on background only
							frame2 = db_keypoint(1:2,idb_bg);
							bg_kp = [bg_kp frame2];
						end
					end
					fg_kp = unique(fg_kp', 'rows')';
					bg_kp = unique(bg_kp', 'rows')';
					
					%N_fg = N_fg+size(fg_kp,2);
					%N_bg = N_bg+size(bg_kp,2);%% checkkkkkkkkkkkkkkk lai o tren dung ransac
					N_bg = size(bg_kp,2);
					Nd = 0;
					if ~isempty(fg_kp)
						Nd = sum(fg_kp(1,:)>=left(frame_locs(frame_idx))&fg_kp(1,:)<=right(frame_locs(frame_idx))&...
								 fg_kp(2,:)>=top(frame_locs(frame_idx))&fg_kp(2,:)<=bottom(frame_locs(frame_idx)));
					end
					%% compute Nd, N_fg, N_bg, p_score
					% Nd = number of shares words between DPM region and background inliers
					% N_fg = number of shares words in foreground region of query image and frames images
					% N_bg = number of shares words in foreground region of query image and frames images				
					%new_scores(end+1) = exp(Nd)*log2(max(2,N_bg))*P_score;				% Cong thuc goc
					%new_scores(end+1) = (Nd+0.001)*log2(max(2,N_bg))*P_score; 	% binh thuong, co epsilon
					new_scores(end+1) = max(1,Nd)*log2(max(2,N_bg))*P_score; 	% remove epsilon
					%new_scores(end+1) = P_score; 								% fuse 2 : 1
					
					if debug_mode
						fullfile('/net/per610a/export/das11g/caizhizhu/ins/ins2013/frames_png/', shot, [frame_name{end}{1} '.png'])
						I = imread(fullfile('/net/per610a/export/das11g/caizhizhu/ins/ins2013/frames_png/', shot, [frame_name{end}{1} '.png']));
						figure; imshow(I); hold on;
						xx = [left(frame_locs(frame_idx))  right(frame_locs(frame_idx)) right(frame_locs(frame_idx)) left(frame_locs(frame_idx)) left(frame_locs(frame_idx))];
						yy = [top(frame_locs(frame_idx)) top(frame_locs(frame_idx)) bottom(frame_locs(frame_idx)) bottom(frame_locs(frame_idx)) top(frame_locs(frame_idx))];
						plot(xx, yy, 'r');
						if ~isempty(fg_kp)
							plot(fg_kp(1,:), fg_kp(2,:), 'g+');
						end
						if ~isempty(bg_kp)
							plot(bg_kp(1,:), bg_kp(2,:), 'b+');
						end
						pause;
					end
				end
				% Write to output file
				if ~debug_mode
					fprintf(fid, '%s #$# %s #$# %f\n', shot, shot, max(new_scores));
				end
			end
			if ~debug_mode
				fclose(fid);
				status = unix(['mv ' dpm_nonransac_res_local_file ' ' dpm_nonRANSAC_res_file]);
				if status == 0
					try
						delete(dpm_nonransac_res_local_file);
					catch
						error('Cannot delete temporary result file');
					end
				end
				fileattrib(dpm_nonRANSAC_res_file, '+w', 'a');
			end
			clear inliers_struct fg_locs fg_kp bg_kp frame_names shot_id score left top right bottom frame_locs
		end
	end
end

quit

end
